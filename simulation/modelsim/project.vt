// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/29/2022 23:25:51"
                                                                                
// Verilog Test Bench template for design : project
// 
// Simulation tool : Questa Intel FPGA (Verilog)
// 

`timescale 1 ps/ 1 ps
module project_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg [7:0] in_port;
// wires                                               
wire [7:0]  out_port;

integer i;

// assign statements (if any)                          
project i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in_port(in_port),
	.out_port(out_port)
);
initial                                                
begin                                                  
in_port=8'h0f; 
clk=1;
for(i=0;i<500;i=i+1) begin //210 
	#1000 clk=~clk;  
end	
end 

//always #1000 clk=~clk;                                                                                                   
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                                                                   
// --> end                                             
end                                                    
endmodule

